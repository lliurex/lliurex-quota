#!/usr/bin/env python3

import sys, os
sys.path.insert(0,'/usr/share/n4d/python-plugins')
from QuotaManager import QuotaManager

import argparse
from n4d.server import core
from n4d.client import Client

import signal

def exit(signum, frame):
    print('{}Aborting...{}'.format('\r'*10,''))
    sys.exit(1)

if __name__=='__main__':

    signal.signal(signal.SIGINT,exit)

    parser = argparse.ArgumentParser(description='Quota administration tool')
    parser.add_argument('-u','--user',metavar='USER',nargs=1,help='User with classroom admin privileges')
    parser.add_argument('-p','--password',metavar='PASSWORD',nargs=1,help='Password from user with classroom admin privileges')
    parser.add_argument('-j','--json',metavar='',action='store_const',help='',const=True)
    
    g = parser.add_mutually_exclusive_group(required=True)
    
    g.add_argument('-co','--configure-serversync',metavar='',action='store_const',help='Configure server-sync to use quota system',const=True)
    g.add_argument('-de','--deconfigure-serversync',metavar='',action='store_const',help='Deconfigure server-sync without quota system',const=True)

    g.add_argument('-gs','--get-status',metavar='',action='store_const',help='Get status of lliurex-quota system (using proxied calls if needed)',const=True)
    g.add_argument('-gls','--get-local-status',metavar='',action='store_const',help='Get status of lliurex-quota system locally',const=True)
    g.add_argument('-en','--set-enabled',metavar='',action='store_const',help='Enables lliurex-quota',const=True)
    g.add_argument('-di','--set-disabled',metavar='',action='store_const',help='Disables lliurex-quota',const=True)

    g.add_argument('-iq','--start-quotas',metavar='',action='store_const',help='Start quota system',const=True)
    g.add_argument('-eq','--stop-quotas',metavar='',action='store_const',help='Stop quota system',const=True)

    g.add_argument('-cq','--show-configured-quotas',metavar='',action='store_const',help='Get current configured quotas',const=True)
    g.add_argument('-ga','--get-current-quotas',metavar='',action='store_const',help='Get current applied quotas',const=True)
    
    g.add_argument('-sq','--set-quota',metavar=('USER','QUOTAVALUE','MARGINVALUE'),nargs=3,help='Set quota for user')
    g.add_argument('-sgq','--set-group-quota',metavar=('GROUPNAME','QUOTAVALUE','MARGINVALUE'),nargs=3,help='Set quota for group')
    g.add_argument('-gq','--get-quota',metavar='USER',nargs=1,help='Get quota for user')

    g.add_argument('-ru','--reset-user',metavar='USER',nargs=1,help='Reset quota for user')
    g.add_argument('-ra','--reset-all-users',metavar='',action='store_const',help='Reset all user quotas',const=True)

    g.add_argument('-mq','--my-quota',metavar='',action='store_const',help='Get my current quota',const=True)
    
    args = parser.parse_args()
        
    if ( args.user and not args.password ) or ( args.password and not args.user ):
        print('Need user and password parameters')
        sys.exit(1)

    c = None
    qm = None
    ticket = None

    if args.user and args.password:
        try:
            c = Client(address='https://localhost:9779',user=args.user[0],password=args.password[0])
            c.validate_user()
            ticket = c.get_ticket()
            #c = xmlrpclib.ServerProxy('https://localhost:9779') # all clients have n4d ? 
            #auth = (args.user[0],args.password[0])
            #module = 'QuotaManager'
        except Exception as e:
            print('Error getting xmlrpc client, {}, trying to do direct call with QuotaManager'.format(e))
            try:
                qm = QuotaManager(False)
                c = None
            except Exception as e2:
                print('Error getting xmlrpc client (fallback to direct call with QuotaManager), {}'.format(e2))
    else:
        try:
            qm = QuotaManager(False)
        except Exception as e:
            print('Error getting QuotaManager instance, {}'.format(e))

    if args.my_quota:
        if c is not None:
            print('Not available')
            sys.exit(1)
        if not qm:
            print('Not available, error')
            sys.exit(1)
        print(qm.myquota())
        sys.exit(0)

    if args.configure_serversync:
        if c is None: # direct call, no need n4d call
            if qm:
                print(qm.configure_net_serversync())
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.configure_net_serversync())
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.deconfigure_serversync:
        if c is None:
            if qm:
                print(qm.deconfigure_net_serversync())
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.deconfigure_net_serversync())
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.get_status:
        if c is None:
            if qm:
                print(qm.get_status())
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.get_status())
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.get_local_status:
        if qm:
            print(qm.get_local_status())
        else:
            try:
                qm = QuotaManager()
                if args.user and args.password:
                    qm.set_credentials(args.user[0], args.password[0])
                print(qm.get_local_status())
            except Exception as e:
                print('QuotaManager not available!, {}'.format(e))

    if args.set_enabled:
        if c is None:
            if qm:
                print(qm.set_status(True))
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.set_status(True))
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.set_disabled:
        if c is None:
            if qm:
                print(qm.set_status(False))
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.set_status(False))
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.start_quotas:
        if c is None:
            if qm:
                print(qm.start_quotas())
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.start_quotas())
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.stop_quotas:
        if c is None:
            if qm:
                print(qm.stop_quotas())
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.stop_quotas())
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.show_configured_quotas:
        ret = None
        if c is None:
            if qm:
                ret = qm.get_quotafile()
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                ret = c.QuotaManager.get_quotafile()
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))
        if args.json:
            if ret:
                print(ret)
            else:
                print('No return')
        else:
            to_print=''
            try:
                if 'users' in ret:
                    #print('aa{}\n\n'.format(ret['users']))
                    for user in sorted([u for u in ret['users']]):
                        a='{:15}'.format('quota')
                        b='{:15}'.format('margin')
                        to_print += '{:20}{:15}{:10}{:15}\n'.format(user,a,' ',b)
                        a='{quota:>15}'.format(**ret['users'][user])
                        b='{margin:>15}'.format(**ret['users'][user])
                        to_print += '{:10}{:15} {:10}{:15}\n'.format(' ',a,' ',b)
                    to_print += '\n'
                if 'groups' in ret:
                    for g in sorted([g for g in ret['groups']]):
                        a='{:15}'.format('quota')
                        b='{:15}'.format('margin')
                        to_print += '{:20}{:15}{:10}{:15}\n'.format('@'+g,a,' ',b)
                        a='{quota:>15}'.format(**ret['groups'][g])
                        b='{margin:>15}'.format(**ret['groups'][g])
                        to_print += '{:10}{:15} {:10}{:15}\n'.format(' ',a,' ',b)
                    to_print += '\n'
                print(to_print)
            except Exception as e:
                print('{}\n{}'.format(ret,e))

    if args.get_current_quotas:
        ret = None
        if c is None:
            if qm:
                ret=qm.get_quotas()
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                ret=c.QuotaManager.get_quotas()
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))
        if args.json:
            if ret:
                print(ret)
            else:
                print('No return')
        else:
            to_print=''
            try:
                for user in sorted([u for u in ret]):
                    t1='{} {:>10} {:>10} {:>10} {:>10} {:>10}'.format('SPACE','status','used','soft','hard','grace')
                    t2='{} {:>10} {:>10} {:>10} {:>10} {:>10}'.format('FILES','status','used','soft','hard','grace')
                    to_print += '{:20} {:>50} {:10} {:>50}\n'.format(user,t1,' ',t2)
                    a='{spacestatus:>10} {spaceused:>10} {spacesoftlimit:>10} {spacehardlimit:>10} {spacegrace:>10}'.format(**ret[user])
                    b='{filestatus:>10} {fileused:>10} {filesoftlimit:>10} {filehardlimit:>10} {filegrace:>10}'.format(**ret[user])
                    to_print += '{:20} {:5} {:>50} {:10} {:5} {:>50}\n'.format(' ',' ',a,' ',' ',b)
                to_print += '\n'
                print(to_print)
            except:
                print('{}'.format(ret))

    if args.set_quota:
        user,quota,margin = args.set_quota
        if type(user) == type(list()):
            user = user[0]
        if type(quota) == type(list()):
            quota = quota[0]
        if type(margin) == type(list()):
            margin = margin[0]
        if c is None:
            if qm:
                print(qm.set_userquota(user,quota,margin))
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.set_userquota(user,quota,margin))
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))


    if args.set_group_quota:
        group,quota,margin = args.set_group_quota
        if type(group) == type(list()):
            group = group[0]
        if type(quota) == type(list()):
            quota = quota[0]
        if type(margin) == type(list()):
            margin = margin[0]
        if c is None:
            if qm:
                print(qm.set_groupquota(group,quota,margin))
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.set_groupquota(group,quota,margin))
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.get_quota:
        user = args.get_quota
        if type(user) == type(list()):
            user = user[0]
        if c is None:
            if qm:
                print(qm.get_userquota(user))
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.get_userquota(user))
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.reset_user:
        user = args.reset_user
        if type(user) == type(list()):
            user = user[0]
        if c is None:
            if qm:
                print(qm.reset_user(user))
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.reset_user(user))
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))

    if args.reset_all_users:
        if c is None:
            if qm:
                print(qm.reset_all_users())
            else:
                print('Error QuotaManager not available, aborting')
        else:
            try:
                print(c.QuotaManager.reset_all_users())
            except Exception as e:
                print('Error rpc client not available, aborting, {}'.format(e))
